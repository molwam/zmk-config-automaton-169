/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF_L 0
#define NAV_L 1
// #define NUM_L 2
// #define SYM_L 3
// #define OTH_L 4

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*            KEY POSITIONS

             0   1   2              3   4   5    
         6   7   8   9  10     11  12  13  14  15
        16  17  18  19  20     21  22  23  24  25
                26  27  28     29  30  31              
        */
        combo_dot { timeout-ms = <50>; key-positions = <23 24>; bindings = <&kp DOT>; layers = <DEF_L>; };
        combo_comma { timeout-ms = <50>; key-positions = <22 23>; bindings = <&kp COMMA>; layers = <DEF_L>; };
        combo_colon { timeout-ms = <50>; key-positions = <14 15>; bindings = <&kp COLON>; layers = <DEF_L>; };
        combo_slash { timeout-ms = <50>; key-positions = <24 25>; bindings = <&kp SLASH>; layers = <DEF_L>; };
        combo_lbkt { timeout-ms = <50>; key-positions = <22 23>; bindings = <&kp LBKT>; layers = <NAV_L>; };
        combo_rbkt { timeout-ms = <50>; key-positions = <23 24>; bindings = <&kp RBKT>; layers = <NAV_L>; };
        combo_lpar { timeout-ms = <50>; key-positions = <12 13>; bindings = <&kp LPAR>; layers = <DEF_L NAV_L>; };
        combo_rpar { timeout-ms = <50>; key-positions = <13 14>; bindings = <&kp RPAR>; layers = <DEF_L NAV_L>; };
        combo_lbrc { timeout-ms = <50>; key-positions = <3 4>; bindings = <&kp LBRC>; layers = <DEF_L NAV_L>; };
        combo_rbrc { timeout-ms = <50>; key-positions = <4 5>; bindings = <&kp RBRC>; layers = <DEF_L NAV_L>; };
        combo_excl { timeout-ms = <50>; key-positions = <24 25>; bindings = <&kp EXCL>; layers = <NAV_L>; };
    };

    keymap {
        compatible = "zmk,keymap";
        //             | Y     | O     | U     |                   | L     | D     | W     |
        //      | C    | I     | E     | A     | B     |   | V     | H     | T     | S     | N     | 
        //      | Z    | X     | J     | K     | G     |   | P     | R     | M     | T     | Q     |
        //                     | ESC   | TAB   | SPACE |   | BSPC  | ENTER | DEL   |
        default_layer {
            bindings = <
                           &kp Y      &kp O        &kp U                                          &kp L           &kp D       &kp W       
                &hm LGUI C &hm LALT I &hm LCTRL E  &hm LSHFT A   &kp B             &kp V          &hm RSHFT H     &hm RCTRL T &hm LALT S &hm RGUI N
                &kp Z      &kp X      &kp J        &kp K         &kp G             &kp P          &kp R           &kp M       &kp F      &kp Q
                                      &mt LGUI ESC &lt NAV_L TAB &mt LSHFT SPACE   &mt LCTRL BSPC &lt NAV_L ENTER &mt LALT DEL
            >;
        };


// = * + ' " ` @ % & # € $ ^
// fuer num layer: = *
// wichtig:  # @
// unwichtig: ^ $ € %
        //             | POS1  | UP    | END   |                   |   \   |   `   |   ~   |
        //      | volD | LEFT  | DOWN  | RIGHT | volU  |   |   +   |   |   |   "   |   -   |   &   | 
        //      | sPos1| sBWrd | sBChr | sFChr | sFWrd |   |   #   |   /   |   '   |   _   |   @   |
        //                     | ESC   | TAB   | SPACE |   | BSPC  | ENTER | DEL   |
        nav_layer {
            label = "Nav";
            bindings = <
                             &kp HOME         &kp UP       &kp END                                         &kp BSLH        &kp GRAVE     &kp TILDE 
                &kp C_VOL_DN &kp LEFT         &kp DOWN     &kp RIGHT     &kp C_VOL_UP           &kp PLUS   &hm RSHFT PIPE  &hm RCTRL DQT &hm LALT MINUS &hm RGUI AMPS
                &kp LS(HOME) &kp LS(LC(LEFT)) &kp LS(LEFT) &kp LS(RIGHT) &kp LS(LC(RIGHT))      &kp HASH   &kp SLASH       &kp SQT       &kp UNDER      &kp AT
                                              &trans       &trans        &trans                 &trans     &trans          &trans               
            >;
        };

        // num_layer {
        //     label = "Num";
        //     bindings = <
        //         &kp LBKT   &kp N7     &kp N8      &kp N9          &kp RBKT      &trans          &trans         &trans      &trans     &trans
        //         &kp SEMI   &kp N4     &kp N5      &kp N6          &kp EQUAL     &trans          &trans         &trans      &trans     &trans
        //                    &kp N1     &kp N2      &kp N3                                        &trans         &trans      &trans
        //                                           &kp N0          &kp MINUS     &trans          &trans
        //     >;
        // };

        // sym_layer {
        //     label = "Sym";
        //     bindings = <
        //         &kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)      &kp RBRC      &trans          &trans         &trans      &trans     &trans
        //         &kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)      &kp PLUS      &trans          &trans         &trans      &trans     &trans
        //                    &kp LS(N1) &kp LS(N2)  &kp LS(N3)                                    &trans         &trans      &trans
        //                                           &kp LS(N0)      &kp UNDER     &trans          &trans
        //     >;
        // };
    };
};
